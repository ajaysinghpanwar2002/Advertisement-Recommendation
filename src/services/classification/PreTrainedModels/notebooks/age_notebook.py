# -*- coding: utf-8 -*-
"""LeviHessener_Retrained_Age.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E3vt12uqHBV5btgjS6XgctWxqUDeoaQO
"""

import torch
import matplotlib.pyplot as plt
import numpy as np
import torchvision
import torchvision.transforms as transforms
import torch.nn as nn
import tensorflow as tf
from tensorflow import keras
import os
import pandas as pd

device = device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
print(device)

age = keras.Sequential([
                          keras.layers.Conv2D(96, 7, strides=4, padding='valid', activation='relu', input_shape=(227, 227, 3)),
                          keras.layers.MaxPooling2D(3, 2, padding='valid'),
                          keras.layers.BatchNormalization(axis=1, epsilon=0.001, momentum=0.9997),
                          keras.layers.Conv2D(256, 5, strides=1, padding='same', activation='relu'),
                          keras.layers.MaxPooling2D(3, 2, padding='valid'),
                          keras.layers.BatchNormalization(axis=1, epsilon=0.001, momentum=0.9997),
                          keras.layers.Conv2D(384, 3, strides=1, padding='valid', activation='relu'),
                          keras.layers.MaxPooling2D(3, 2, padding='valid'),
                          keras.layers.Flatten(),
                          keras.layers.Dense(512, activation='relu'),
                          keras.layers.Dropout(0.5),
                          keras.layers.Dense(512, activation='relu'),
                          keras.layers.Dropout(0.5),
                          keras.layers.Dense(9, activation='softmax')
])
age.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy', 'mae', tf.keras.metrics.CategoricalAccuracy()])

from PIL import Image

def preprocess(path):
  image = Image.open(path)
  image = image.resize((227, 227))
  return np.array(image)

!git clone https://github.com/circulosmeos/gdown.pl.git

!./gdown.pl/gdown.pl https://drive.google.com/file/d/0BxYys69jI14kb2o4ajJwQ3FOUm8/edit part1.tar.gz

!./gdown.pl/gdown.pl https://drive.google.com/file/d/0BxYys69jI14kNEt1SnNJN1Z2WWc/edit part2.tar.gz

!./gdown.pl/gdown.pl https://drive.google.com/file/d/0BxYys69jI14kVkVTZHZHa21zUXM/edit part3.tar.gz

import tarfile
my_tar = tarfile.open('part1.tar.gz')
my_tar.extractall('./part1') # specify which folder to extract to
my_tar.close()

my_tar = tarfile.open('part2.tar.gz')
my_tar.extractall('./part2') # specify which folder to extract to
my_tar.close()

my_tar = tarfile.open('part3.tar.gz')
my_tar.extractall('./part3') # specify which folder to extract to
my_tar.close()

!ls part1/part1

!./gdown.pl/gdown.pl https://drive.google.com/file/d/1i1L3Yqwaio7YSOCj7ftgk8ZZchPG7dmH/edit train.csv

!./gdown.pl/gdown.pl https://drive.google.com/file/d/1Z1RqRo0_JiavaZw2yzZG6WETdZQ8qX86/edit dataset.zip

!unzip dataset.zip

Image.open('part1/part1/3_1_3_20161219230521112.jpg')

!./gdown.pl/gdown.pl https://drive.google.com/file/d/1wOdja-ezstMEp81tX1a-EYkFebev4h7D/edit val.csv

path = 'part1/part1/'
input = []
output = []
for filename in os.listdir(path):
  if filename.endswith(".jpg"):
    if (filename.split('_')[2] == '3'):
      actual_age = int(filename.split('_')[0])
      if(actual_age>=0 and actual_age <=2):
        output.append(0)
      elif (actual_age>=3 and actual_age <= 9):
        output.append(1)
      elif (actual_age>9 and actual_age<=19):
        output.append(2)
      elif (actual_age>19 and actual_age<=29):
        output.append(3)
      elif (actual_age>29 and actual_age<=39):
        output.append(4)
      elif (actual_age>39 and actual_age<=49):
        output.append(5)
      elif (actual_age>49 and actual_age<=59):
        output.append(6)
      elif (actual_age>59 and actual_age<=69):
        output.append(7)
      else:
        output.append(8)
      input.append(preprocess(path+filename))
    continue
  else:
    continue

path = 'part2/part2/'
for filename in os.listdir(path):
  if filename.endswith(".jpg"):
    if (filename.split('_')[2] == '3'):
      actual_age = int(filename.split('_')[0])
      if(actual_age>=0 and actual_age <=2):
        output.append(0)
      elif (actual_age>=3 and actual_age <= 9):
        output.append(1)
      elif (actual_age>9 and actual_age<=19):
        output.append(2)
      elif (actual_age>19 and actual_age<=29):
        output.append(3)
      elif (actual_age>29 and actual_age<=39):
        output.append(4)
      elif (actual_age>39 and actual_age<=49):
        output.append(5)
      elif (actual_age>49 and actual_age<=59):
        output.append(6)
      elif (actual_age>59 and actual_age<=69):
        output.append(7)
      else:
        output.append(8)
      input.append(preprocess(path+filename))
    continue
  else:
    continue

path = 'part3/part3/'
for filename in os.listdir(path):
  if filename.endswith(".jpg"):
    if (filename.split('_')[2] == '3'):
      actual_age = int(filename.split('_')[0])
      if (actual_age>=0 and actual_age <=2):
        output.append(0)
      elif (actual_age>=3 and actual_age <= 9):
        output.append(1)
      elif (actual_age>9 and actual_age<=19):
        output.append(2)
      elif (actual_age>19 and actual_age<=29):
        output.append(3)
      elif (actual_age>29 and actual_age<=39):
        output.append(4)
      elif (actual_age>39 and actual_age<=49):
        output.append(5)
      elif (actual_age>49 and actual_age<=59):
        output.append(6)
      elif (actual_age>59 and actual_age<=69):
        output.append(7)
      else:
        output.append(8)
      input.append(preprocess(path+filename))
    continue
  else:
    continue

dataset_train = pd.read_csv('train.csv')
dataset_train.head()

for ind in dataset_train.index:
  if(dataset_train['race'][ind] != 'Indian'):
    continue
  path = dataset_train['file'][ind]
  actual_age = dataset_train['age'][ind]
  if (actual_age == '0-2'):
    actual_age = 0
  elif (actual_age == '3-9'):
    actual_age = 1
  elif (actual_age == '10-19'):
    actual_age = 2
  elif (actual_age == '20-29'):
    actual_age = 3
  elif (actual_age == '30-39'):
    actual_age = 4
  elif (actual_age == '40-49'):
    actual_age = 5
  elif (actual_age == '50-59'):
    actual_age = 6
  elif (actual_age == '60-69'):
    actual_age = 7
  elif (actual_age == 'more than 70'):
    actual_age = 8
  input.append(preprocess(path))
  output.append(actual_age)

print(len(input), len(output))
input = np.asarray(input)
output = np.asarray(output)
b = np.zeros((output.size, output.max()+1))
b[np.arange(output.size),output] = 1
output = b

age.fit(input, output, batch_size=256, epochs=100, validation_split =0.20, shuffle=True)

age_classes = ['0-2', '3-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', 'more than 70']

def age_predict(path):
  l = []
  l.append(preprocess(path))
  l = np.asarray(l)
  prediction = age.predict(l)[0]
  return np.argmax(prediction)

age_predict('part1/part1/3_1_3_20161219230521112.jpg')

validation = pd.read_csv('val.csv')
validation.head()

validation['race'].value_counts()

rows, cols = (9, 9)
age_vs_age = [[0 for i in range(cols)] for j in range(rows)]
for ind in validation.index:
  if(validation['race'][ind] != 'Indian'):
    continue
  print(ind)
  path = validation['file'][ind]
  actual_age = validation['age'][ind]
  if (actual_age == '0-2'):
    actual_age = 0
  elif (actual_age == '3-9'):
    actual_age = 1
  elif (actual_age == '10-19'):
    actual_age = 2
  elif (actual_age == '20-29'):
    actual_age = 3
  elif (actual_age == '30-39'):
    actual_age = 4
  elif (actual_age == '40-49'):
    actual_age = 5
  elif (actual_age == '50-59'):
    actual_age = 6
  elif (actual_age == '60-69'):
    actual_age = 7
  elif (actual_age == 'more than 70'):
    actual_age = 8
  predicted_age = age_predict(path)
  age_vs_age[actual_age][predicted_age]+=1

for row in age_vs_age:
  print(row)

!pip install h5py

# serialize model to JSON
model_json = age.to_json()
with open("age.json", "w") as json_file:
    json_file.write(model_json)
# serialize weights to HDF5
age.save_weights("age.h5")
print("Saved model to disk")

